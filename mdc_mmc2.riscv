.data
str:
	.string "\n"
invalido:
	.string "Entrada invalida.\n"

.text

main:
	
	addi s1, zero, 2
	li a7, 5
	ecall
	mv t0, a0
	mv s5, t0
	
	li a7, 5
	ecall
	mv t1, a0
	mv s4, t1
	
	blt t0, s1, naopode
	blt t1, s1, naopode
	
	jal mdc
	jal mmc
	
	j done
naopode: 
	li a7, 4
	la a0, invalido
	ecall
	j done
mdc:
	rem t3, t0, t1
	beqz t3, printa_mdc 
	mv t0, t1
	mv t1, t3
	bnez t3, mdc
printa_mdc:
	li a7, 1
	mv a0, t1
	ecall
	li a7, 4
	la a0, str
	ecall
	jr ra
testa_numero:
	addi s1, zero, 2 
	addi t6, t3, -1
	beq t3, s1, retorna_n 
	loop_se_eh_primo_ou_nn:
	rem s0, t3, s1
	bnez s0, condicao
	addi t3, zero, -1
	jr ra
	condicao:	
	beq s1, t6, retorna_n
	addi s1, s1, 1
	j loop_se_eh_primo_ou_nn
	retorna_n:
	jr ra
mmc:
	mv t0, s5
	mv t1, s4
	addi t5, zero, 1 
	addi t3, zero, 2 	
	loop1:
	mv s6, t3	
	loop2:	
	jal testa_numero
	bgt t3, s2, ve_se_eh_divisivel
	mv t3, s6
	j fim_loop1		
	ve_se_eh_divisivel:
	rem s0, t0, t3
	beqz s0, condicao_y_no_x
	rem s1, t1, t3
	beqz s1, condicao_x_no_y
	j fim_loop2
	condicao_y_no_x:
	rem s1, t1, t3
	beqz s1, divide_x_y
	j soh_x
	condicao_x_no_y:
	rem s0, t0, t3
	beqz s0, divide_x_y
	j soh_y
	soh_x:
	div t0, t0, t3
	mul t5, t5, t3
	j fim_loop2
	soh_y:
	div t1, t1, t3
	mul t5, t5, t3
	j fim_loop2
	divide_x_y:
	div t0, t0, t3
	div t1, t1, t3
	mul t5, t5, t3
	fim_loop2:
	rem s0, t0, t3 
	rem s1, t1, t3
	beqz s0, loop2
	beqz s1, loop2		
	fim_loop1:	
	addi t3, t3, 1
	beq t0, t1, eh_igual_a_1_ou_nn
	j loop1
	eh_igual_a_1_ou_nn:
	addi s1, zero, 1
	beq  t0, s1, printa_mmc
printa_mmc:
	li a7, 1
	mv a0, t5
	ecall
	li a7, 4
	la a0, str
	ecall
done: